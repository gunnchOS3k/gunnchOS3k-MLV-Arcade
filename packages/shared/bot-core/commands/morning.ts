import { SlashCommandBuilder, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } from 'discord.js';
import fs from 'fs/promises';
import path from 'path';

// Morning report storage
const reportFile = path.join(process.cwd(), 'data', 'morning-report.txt');
const approvedFile = path.join(process.cwd(), 'data', 'approved-recommendations.json');

interface ApprovedRecommendation {
  id: string;
  title: string;
  description: string;
  url: string;
  category: string;
  approvedAt: string;
  implemented: boolean;
}

// Load approved recommendations
async function loadApprovedRecommendations(): Promise<ApprovedRecommendation[]> {
  try {
    const data = await fs.readFile(approvedFile, 'utf-8');
    return JSON.parse(data);
  } catch {
    return [];
  }
}

// Save approved recommendations
async function saveApprovedRecommendations(recommendations: ApprovedRecommendation[]): Promise<void> {
  await fs.mkdir(path.dirname(approvedFile), { recursive: true });
  await fs.writeFile(approvedFile, JSON.stringify(recommendations, null, 2));
}

// Generate morning report
async function generateMorningReport(): Promise<string> {
  try {
    const report = await fs.readFile(reportFile, 'utf-8');
    return report;
  } catch {
    return 'No morning report available. Run the learning system to generate one.';
  }
}

// Create morning report embed
function createMorningReportEmbed(report: string): EmbedBuilder {
  const embed = new EmbedBuilder()
    .setTitle('🌅 gunnchAI3k Morning Report')
    .setDescription('Nightly learning discoveries and recommendations')
    .setColor(0xffd700)
    .setTimestamp()
    .setFooter({ text: 'Generated by gunnchAI3k Learning System' });

  // Parse report and create fields
  const lines = report.split('\n');
  let currentSection = '';
  let sectionContent = '';

  for (const line of lines) {
    if (line.startsWith('📊') || line.startsWith('🚨') || line.startsWith('⚠️') || line.startsWith('✅')) {
      if (currentSection && sectionContent) {
        embed.addFields({
          name: currentSection,
          value: sectionContent,
          inline: false
        });
      }
      currentSection = line;
      sectionContent = '';
    } else if (line.trim() && !line.startsWith('•')) {
      sectionContent += line + '\n';
    } else if (line.startsWith('•')) {
      sectionContent += line + '\n';
    }
  }

  // Add final section
  if (currentSection && sectionContent) {
    embed.addFields({
      name: currentSection,
      value: sectionContent,
      inline: false
    });
  }

  return embed;
}

// Create approved recommendations embed
function createApprovedEmbed(recommendations: ApprovedRecommendation[]): EmbedBuilder {
  const embed = new EmbedBuilder()
    .setTitle('✅ Approved Recommendations')
    .setDescription('Learning opportunities you\'ve green-lit for implementation')
    .setColor(0x00ff00)
    .setTimestamp();

  if (recommendations.length === 0) {
    embed.addFields({
      name: 'No Approved Recommendations',
      value: 'No recommendations have been approved yet. Use the learning system to discover and approve new opportunities.',
      inline: false
    });
  } else {
    recommendations.forEach((rec, index) => {
      embed.addFields({
        name: `${index + 1}. ${rec.title}`,
        value: `**Category:** ${rec.category}\n**Status:** ${rec.implemented ? '✅ Implemented' : '⏳ Pending'}\n**URL:** ${rec.url}`,
        inline: true
      });
    });
  }

  return embed;
}

export const command = {
  data: new SlashCommandBuilder()
    .setName('morning')
    .setDescription('Get gunnchAI3k\'s morning learning report')
    .addSubcommand(subcommand =>
      subcommand
        .setName('report')
        .setDescription('Get the latest morning report')
    )
    .addSubcommand(subcommand =>
      subcommand
        .setName('approve')
        .setDescription('Approve learning recommendations (Admin only)')
        .addStringOption(option =>
          option
            .setName('title')
            .setDescription('Title of the recommendation to approve')
            .setRequired(true)
        )
        .addStringOption(option =>
          option
            .setName('description')
            .setDescription('Description of the recommendation')
            .setRequired(true)
        )
        .addStringOption(option =>
          option
            .setName('url')
            .setDescription('URL of the learning resource')
            .setRequired(true)
        )
        .addStringOption(option =>
          option
            .setName('category')
            .setDescription('Category of the recommendation')
            .setRequired(true)
        )
    )
    .addSubcommand(subcommand =>
      subcommand
        .setName('approved')
        .setDescription('View approved recommendations')
    )
    .addSubcommand(subcommand =>
      subcommand
        .setName('scoop')
        .setDescription('Share the nightly scoop with the Discord server')
    ),

  async execute(interaction: any) {
    if (interaction.options.getSubcommand() === 'report') {
      const report = await generateMorningReport();
      const embed = createMorningReportEmbed(report);
      
      const row = new ActionRowBuilder<ButtonBuilder>()
        .addComponents(
          new ButtonBuilder()
            .setCustomId('morning_refresh')
            .setLabel('🔄 Refresh Report')
            .setStyle(ButtonStyle.Primary),
          new ButtonBuilder()
            .setCustomId('morning_approve')
            .setLabel('✅ Approve Recommendations')
            .setStyle(ButtonStyle.Success)
        );

      await interaction.reply({
        embeds: [embed],
        components: [row]
      });
    }

    if (interaction.options.getSubcommand() === 'approve') {
      // Check if user is admin
      const isAdmin = interaction.user.id === process.env.EXECUTIVE_USER_ID;
      
      if (!isAdmin) {
        return interaction.reply({
          content: '❌ This command is restricted to administrators only.',
          ephemeral: true
        });
      }

      const title = interaction.options.getString('title');
      const description = interaction.options.getString('description');
      const url = interaction.options.getString('url');
      const category = interaction.options.getString('category');

      const recommendation: ApprovedRecommendation = {
        id: `approved_${Date.now()}`,
        title,
        description,
        url,
        category,
        approvedAt: new Date().toISOString(),
        implemented: false
      };

      const approved = await loadApprovedRecommendations();
      approved.push(recommendation);
      await saveApprovedRecommendations(approved);

      const embed = new EmbedBuilder()
        .setTitle('✅ Recommendation Approved!')
        .setDescription(`**${title}** has been approved for implementation.`)
        .setColor(0x00ff00)
        .addFields(
          {
            name: 'Details',
            value: `**Category:** ${category}\n**URL:** ${url}`,
            inline: false
          },
          {
            name: 'Next Steps',
            value: 'This recommendation will be reviewed for implementation. Use `/morning approved` to track progress.',
            inline: false
          }
        )
        .setTimestamp();

      await interaction.reply({
        embeds: [embed],
        ephemeral: true
      });
    }

    if (interaction.options.getSubcommand() === 'approved') {
      const approved = await loadApprovedRecommendations();
      const embed = createApprovedEmbed(approved);

      await interaction.reply({
        embeds: [embed],
        ephemeral: true
      });
    }

    if (interaction.options.getSubcommand() === 'scoop') {
      const report = await generateMorningReport();
      const approved = await loadApprovedRecommendations();
      
      const embed = new EmbedBuilder()
        .setTitle('🌅 gunnchAI3k Nightly Scoop')
        .setDescription('Here\'s what gunnchAI3k discovered overnight!')
        .setColor(0x4ecdc4)
        .setTimestamp();

      // Parse report for key highlights
      const lines = report.split('\n');
      const highlights = lines.filter(line => 
        line.includes('new learning opportunities') || 
        line.includes('high priority') || 
        line.includes('approved for implementation')
      );

      if (highlights.length > 0) {
        embed.addFields({
          name: '🔍 Key Discoveries',
          value: highlights.join('\n'),
          inline: false
        });
      }

      if (approved.length > 0) {
        embed.addFields({
          name: '✅ Approved Recommendations',
          value: `${approved.length} recommendations ready for implementation`,
          inline: true
        });
      }

      embed.addFields({
        name: '📚 Full Report',
        value: 'Use `/morning report` to see the complete learning report',
        inline: false
      });

      await interaction.reply({
        embeds: [embed]
      });
    }
  },

  async onButton(interaction: any) {
    if (interaction.customId === 'morning_refresh') {
      await interaction.deferUpdate();
      
      const report = await generateMorningReport();
      const embed = createMorningReportEmbed(report);
      
      const row = new ActionRowBuilder<ButtonBuilder>()
        .addComponents(
          new ButtonBuilder()
            .setCustomId('morning_refresh')
            .setLabel('🔄 Refresh Report')
            .setStyle(ButtonStyle.Primary),
          new ButtonBuilder()
            .setCustomId('morning_approve')
            .setLabel('✅ Approve Recommendations')
            .setStyle(ButtonStyle.Success)
        );

      await interaction.editReply({
        embeds: [embed],
        components: [row]
      });
    }

    if (interaction.customId === 'morning_approve') {
      await interaction.deferReply({ ephemeral: true });
      
      const embed = new EmbedBuilder()
        .setTitle('✅ Approve Learning Recommendations')
        .setDescription('Use `/morning approve` to approve specific recommendations for implementation.')
        .setColor(0x4ecdc4)
        .addFields(
          {
            name: 'How to Approve',
            value: '1. Use `/morning report` to see available recommendations\n2. Use `/morning approve` with the details\n3. Track approved items with `/morning approved`',
            inline: false
          }
        );

      await interaction.editReply({
        embeds: [embed]
      });
    }
  }
};
